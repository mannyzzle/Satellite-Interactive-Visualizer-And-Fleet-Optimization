name: Update Satellites & Infographics

on:
  schedule:
    - cron: "0 6 * * *"  # âœ… Runs every day at 06:00 UTC
  workflow_dispatch:
    inputs:
      run_update_db:
        description: "Run Satellite Database Update?"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  update_db:
    if: ${{ github.event_name == 'schedule' || inputs.run_update_db == 'true' }}  # âœ… Runs if scheduled or triggered manually
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set Env Vars
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "SPACETRACK_USER=${{ secrets.SPACETRACK_USER }}" >> $GITHUB_ENV
          echo "SPACETRACK_PASS=${{ secrets.SPACETRACK_PASS }}" >> $GITHUB_ENV

      - name: Build & Run Updater
        run: |
          docker build -t satellite-updater -f backend/Dockerfile.update ./backend
          docker run --rm \
            -e DB_HOST=$DB_HOST \
            -e DB_NAME=$DB_NAME \
            -e DB_USER=$DB_USER \
            -e DB_PASSWORD=$DB_PASSWORD \
            -e SPACETRACK_USER=$SPACETRACK_USER \
            -e SPACETRACK_PASS=$SPACETRACK_PASS \
            satellite-updater

  generate_infographics:
    runs-on: ubuntu-latest
    needs: update_db  # âœ… Waits for `update_db` if it runs
    if: always()  # âœ… Ensures it runs even if `update_db` is skipped

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python Dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install matplotlib seaborn pandas sqlalchemy psycopg2

      - name: Ensure Infographics Directory Exists  # âœ… Fix 1 Added Here
        run: |
          mkdir -p backend/infographics
          chmod -R 777 backend/infographics  # Ensure write permissions

      - name: Remove Old Infographics
        run: rm -rf backend/infographics/*  # âœ… Clears old files to ensure fresh data
  

      - name: Generate Infographics
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: 5432
        run: |
          python -c "
          import os
          import pandas as pd
          from sqlalchemy import create_engine
          from backend.app.generate_infographics import generate_infographics, filters

          db_user = os.getenv('DB_USER')
          db_password = os.getenv('DB_PASSWORD')
          db_host = os.getenv('DB_HOST')
          db_port = os.getenv('DB_PORT')
          db_name = os.getenv('DB_NAME')

          engine = create_engine(f'postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}')

          def get_top_20_countries():
              query = 'SELECT country, COUNT(*) as count FROM satellites WHERE country IS NOT NULL GROUP BY country ORDER BY count DESC LIMIT 20;'
              with engine.connect() as conn:
                  df = pd.read_sql(query, conn)
              return df['country'].tolist() if not df.empty else []

          top_countries = get_top_20_countries()

          print('ðŸ”„ Generating Infographics for All Filters...')
          for name, condition in filters.items():
              generate_infographics(name, condition)

          print('ðŸ”„ Generating Infographics for Select Launch Years...')
          for year in range(1990, 2026):
              generate_infographics(f'Launch Year {year}', f'EXTRACT(YEAR FROM launch_date) = {year}')

          if top_countries:
              print(f'ðŸ”„ Generating Infographics for Top 20 Countries: {top_countries}')
              for country in top_countries:
                  generate_infographics(f'Country {country}', f\"country = '{country}'\")

          print('âœ… Infographics Generation Completed!')
          "

      - name: Commit & Push Updated Graphs
        run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
            git rm --cached -r backend/infographics/  # âœ… Ensures Git resets the directory
            git add backend/infographics/*.png  # âœ… Adds new files
            
            git commit -m "ðŸ“Š Force update satellite infographics" || echo "No changes to commit"
            git push --force
        